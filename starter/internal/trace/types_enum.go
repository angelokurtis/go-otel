// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.6
// Revision: 97611fddaa414f53713597918c5e954646cb8623
// Build Date: 2023-03-26T21:38:06Z
// Built By: goreleaser

package trace

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// CompressionNone is a Compression of type none.
	CompressionNone Compression = "none"
	// CompressionGzip is a Compression of type gzip.
	CompressionGzip Compression = "gzip"
)

var ErrInvalidCompression = errors.New("not a valid Compression")

// String implements the Stringer interface.
func (x Compression) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Compression) IsValid() bool {
	_, err := ParseCompression(string(x))
	return err == nil
}

var _CompressionValue = map[string]Compression{
	"none": CompressionNone,
	"gzip": CompressionGzip,
}

// ParseCompression attempts to convert a string to a Compression.
func ParseCompression(name string) (Compression, error) {
	if x, ok := _CompressionValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _CompressionValue[strings.ToLower(name)]; ok {
		return x, nil
	}

	return Compression(""), fmt.Errorf("%s is %w", name, ErrInvalidCompression)
}

const (
	// ExporterZipkin is a Exporter of type zipkin.
	ExporterZipkin Exporter = "zipkin"
	// ExporterOtlp is a Exporter of type otlp.
	ExporterOtlp Exporter = "otlp"
	// ExporterNone is a Exporter of type none.
	ExporterNone Exporter = "none"
	// ExporterJaeger is a Exporter of type jaeger.
	ExporterJaeger Exporter = "jaeger"
	// ExporterLogging is a Exporter of type logging.
	ExporterLogging Exporter = "logging"
)

var ErrInvalidExporter = errors.New("not a valid Exporter")

// String implements the Stringer interface.
func (x Exporter) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Exporter) IsValid() bool {
	_, err := ParseExporter(string(x))
	return err == nil
}

var _ExporterValue = map[string]Exporter{
	"zipkin":  ExporterZipkin,
	"otlp":    ExporterOtlp,
	"none":    ExporterNone,
	"jaeger":  ExporterJaeger,
	"logging": ExporterLogging,
}

// ParseExporter attempts to convert a string to a Exporter.
func ParseExporter(name string) (Exporter, error) {
	if x, ok := _ExporterValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ExporterValue[strings.ToLower(name)]; ok {
		return x, nil
	}

	return Exporter(""), fmt.Errorf("%s is %w", name, ErrInvalidExporter)
}

const (
	// PropagatorTracecontext is a Propagator of type tracecontext.
	PropagatorTracecontext Propagator = "tracecontext"
	// PropagatorBaggage is a Propagator of type baggage.
	PropagatorBaggage Propagator = "baggage"
	// PropagatorB3 is a Propagator of type b3.
	PropagatorB3 Propagator = "b3"
	// PropagatorB3multi is a Propagator of type b3multi.
	PropagatorB3multi Propagator = "b3multi"
	// PropagatorJaeger is a Propagator of type jaeger.
	PropagatorJaeger Propagator = "jaeger"
	// PropagatorXray is a Propagator of type xray.
	PropagatorXray Propagator = "xray"
	// PropagatorOttrace is a Propagator of type ottrace.
	PropagatorOttrace Propagator = "ottrace"
)

var ErrInvalidPropagator = errors.New("not a valid Propagator")

// String implements the Stringer interface.
func (x Propagator) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Propagator) IsValid() bool {
	_, err := ParsePropagator(string(x))
	return err == nil
}

var _PropagatorValue = map[string]Propagator{
	"tracecontext": PropagatorTracecontext,
	"baggage":      PropagatorBaggage,
	"b3":           PropagatorB3,
	"b3multi":      PropagatorB3multi,
	"jaeger":       PropagatorJaeger,
	"xray":         PropagatorXray,
	"ottrace":      PropagatorOttrace,
}

// ParsePropagator attempts to convert a string to a Propagator.
func ParsePropagator(name string) (Propagator, error) {
	if x, ok := _PropagatorValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PropagatorValue[strings.ToLower(name)]; ok {
		return x, nil
	}

	return Propagator(""), fmt.Errorf("%s is %w", name, ErrInvalidPropagator)
}

const (
	// ProtocolGrpc is a Protocol of type grpc.
	ProtocolGrpc Protocol = "grpc"
	// ProtocolHttpProtobuf is a Protocol of type http/protobuf.
	ProtocolHttpProtobuf Protocol = "http/protobuf"
)

var ErrInvalidProtocol = errors.New("not a valid Protocol")

// String implements the Stringer interface.
func (x Protocol) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Protocol) IsValid() bool {
	_, err := ParseProtocol(string(x))
	return err == nil
}

var _ProtocolValue = map[string]Protocol{
	"grpc":          ProtocolGrpc,
	"http/protobuf": ProtocolHttpProtobuf,
}

// ParseProtocol attempts to convert a string to a Protocol.
func ParseProtocol(name string) (Protocol, error) {
	if x, ok := _ProtocolValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ProtocolValue[strings.ToLower(name)]; ok {
		return x, nil
	}

	return Protocol(""), fmt.Errorf("%s is %w", name, ErrInvalidProtocol)
}

const (
	// SamplerAlwaysOn is a Sampler of type always_on.
	SamplerAlwaysOn Sampler = "always_on"
	// SamplerAlwaysOff is a Sampler of type always_off.
	SamplerAlwaysOff Sampler = "always_off"
	// SamplerTraceidratio is a Sampler of type traceidratio.
	SamplerTraceidratio Sampler = "traceidratio"
	// SamplerParentbasedAlwaysOn is a Sampler of type parentbased_always_on.
	SamplerParentbasedAlwaysOn Sampler = "parentbased_always_on"
	// SamplerParentbasedAlwaysOff is a Sampler of type parentbased_always_off.
	SamplerParentbasedAlwaysOff Sampler = "parentbased_always_off"
	// SamplerParentbasedTraceidratio is a Sampler of type parentbased_traceidratio.
	SamplerParentbasedTraceidratio Sampler = "parentbased_traceidratio"
)

var ErrInvalidSampler = errors.New("not a valid Sampler")

// String implements the Stringer interface.
func (x Sampler) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Sampler) IsValid() bool {
	_, err := ParseSampler(string(x))
	return err == nil
}

var _SamplerValue = map[string]Sampler{
	"always_on":                SamplerAlwaysOn,
	"always_off":               SamplerAlwaysOff,
	"traceidratio":             SamplerTraceidratio,
	"parentbased_always_on":    SamplerParentbasedAlwaysOn,
	"parentbased_always_off":   SamplerParentbasedAlwaysOff,
	"parentbased_traceidratio": SamplerParentbasedTraceidratio,
}

// ParseSampler attempts to convert a string to a Sampler.
func ParseSampler(name string) (Sampler, error) {
	if x, ok := _SamplerValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _SamplerValue[strings.ToLower(name)]; ok {
		return x, nil
	}

	return Sampler(""), fmt.Errorf("%s is %w", name, ErrInvalidSampler)
}
